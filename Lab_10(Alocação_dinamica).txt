Lab09 – Memória Dinâmica
1. Crie um programa que:
a) Aloque dinamicamente um array de 5 números inteiros;
b) Peça para o usuário digitar os 5 números no espaço alocado;
c) Mostre na tela os 5 números;
d) Libere a memória alocada.






2. Faça um programa que leia do usuário o tamanho de um vetor a ser lido
e faça a alocação dinâmica de memória. Em seguida, leia do usuário
seus valores e imprima o vetor lido.




3. Faça um programa que leia do usuário o tamanho de um vetor a ser lido
e faça a alocação dinâmica de memória. Em seguida, leia do usuário
seus valores e mostre quantos dos números são pares e quantos são
ímpares.
4. Faça um programa que receba do usuário o tamanho de uma string e
chame uma função para alocar dinamicamente essa string. Em seguida,
o usuário deverá informar o conteúdo dessa string. O programa imprime
a string sem suas vogais.
5. Faça um programa que leia um número N e:
a) Crie dinamicamente e leia um vetor de inteiro de N posições;
b) Leia um número inteiro X e conte e mostre os múltiplos desse número
que existem no vetor.
6. Faça um programa que simule a memória de um computador: o usuário
irá especificar o tamanho da memória, ou seja, quantos bytes serão
alocados do tipo inteiro. Para tanto, a memória solicitada deve ser um
valor múltiplo do tamanho do tipo inteiro. Em seguida, o usuário terá 2
opções: inserir um valor em uma determinada posição ou consultar o
valor contido em uma determinada posição. A memória deve iniciar com
todos os dados zerados.
7. Escreva um programa que leia primeiro os 6 números gerados pela
loteria e depois os 6 números do seu bilhete. O programa então compara
quantos números o jogador acertou. Em seguida, ele aloca espaço para
um vetor de tamanho igual a quantidade de números corretos e guarda
os números corretos nesse vetor. Finalmente, o programa exibe os
números sorteados e os seus números corretos.




8. Faça um programa para armazenar em memória um vetor de dados
contendo 1500 valores do tipo int, usando a função de alocação
dinâmica de memória CALLOC:
a) Faça um loop e verifique se o vetor contém realmente os 1500
valores inicializados com zero (conte os 1500 zeros do vetor);
b) Atribua para cada elemento do vetor o valor do seu índice junto a
este vetor;
c) Exibir na tela os 10 primeiros e os 10 últimos elementos do vetor.


#include <stdio.h>
#include <stdlib.h>

int main()
{
    // Variáveis
    int i, count = 0, vet[1500]; // 'count' irá contar o número de zeros
    int *vetor = (int*) calloc(1500, sizeof(int)); // Aloccando o vetor dinamicamente

    //Loop para verificar se todas as posições dos vetores começam com zero
    for(i = 0; i < 1500; i++){
        if(vetor[i] == 0){
           count ++;
        }
    }

    //Loop para atribuir ao vetor o valor de seu índice
    for(i = 0; i < 1500; i++){
        vetor[i] = i;
    }

    //Loop para imprimir os 10 primeiros índices
    for(i = 0; i < 10; i++){
        printf("O valor do vetor [%d] eh: %d\n", i + 1, vetor[i]);
    }

    //Loop para imprimir os 10 ultimos valores
    for(i = 1490; i < 1500; i++){
        printf("O valor do vetor[%d] eh: %d\n", i + 1, vetor[i]);
    }

    // Imprimindo o numero de zeros
    printf("O vetor contem %d zeros\n", count);
    return 0;
}








9. Faça um programa que leia uma quantidade qualquer de números
armazenando-os na memória e pare a leitura quando o usuário entrar
um número negativo. Em seguida, imprima o vetor lido. Use a função
REALLOC.

#include <stdio.h>
#include <stdlib.h>

int main()
{
    // Variáveis
    int tam = 0, num, i; // 'tam' indica o tamanho. 'num' o numero a ser escrito
    int *vet = NULL;

    printf("Insira um valor inteiro, se ele for negativo o programa para\n");

    while(1){ // Este é um loop infinito que só para quando o numero digitado for negativo
        scanf("%d", &num); //

        if(num < 0){
            break;
        }
    }

    tam++; // A cada numero inserido o tamanho é incrementado e a memória é realocada para receber este numero
    vet = (int*) realloc(vet, tam *sizeof(int));
    vet[tam - 1] = num;

    //Loop para os valores lidos
    for(i = 0; i < tam; i++){
        printf("\nO valor negativo lido eh: %d\n", i + 1, vet[i]);
    }

    return 0;
}







10.Faça um programa que pergunte ao usuário quantos valores ele deseja
armazenar em um vetor de double, depois use a função MALLOC para
reservar (alocar) o espaço de memória de acordo com o especificado
pelo usuário. Esse vetor deve ter um tamanho maior ou igual a 10
elementos. Use este vetor dinâmico como um vetor comum, atribuindo
aos 10 primeiros elementos do vetor valores aleatórios (usando a função
rand) entre 0 e 100. Exiba na tela os valores armazenados nos 10
primeiros elementos do vetor.


#include <stdio.h>
#include <stdlib.h>
#include <time.h> // Necessário para gerar valores aleatórios

int main()
{
    //Variáveis
    int qtd, i; // Indica a quantidade de valores que se deseja armaznar

    printf("Insira a quantidade de valores que deseja armazenar(min 10): \n");
    scanf("%d", &qtd);

    if(qtd < 10){
        printf("A quantidade deve ser igual ou maior que 10");
        return 1;
    }

    double *vet = (double*) malloc(qtd *sizeof(double)); // Alocando a quantidade em um vetor double

    srand(time(NULL));

    for(i = 0; i < 10; i++){
        vet[i] = rand() %101; // Gerando valores aleatórios no vetor
    }

    // Imprimindo os valores armazenados
    for(i = 0; i < 10; i++){
        printf("\nO valor no vetor[%d] eh: %2.lf\n0", i + 1, vet[i]);
    }

    return 0;
}









11.Crie um programa que declare uma estrutura (registro) para o cadastro
de alunos.
a) Deverão ser armazenados, para cada aluno: matrícula, sobrenome
(apenas um) e ano de nascimento;
b) Ao início do programa, o usuário deverá informar o número de alunos
que serão armazenados;
c) O programa deverá alocar dinamicamente a quantidade necessária
de memória para armazenar os registros dos alunos;
d) O programa deverá pedir ao usuário que entre com as informações
dos alunos.
e) Ao final, mostrar os dados armazenados e liberar a memória alocada.


#include <stdio.h>
#include <stdlib.h>
#include <string.h> // Necessário para a string

typedef struct aluno{ // Estrutura para os dados dos alunos
    int mat; // Matrícula
    char sobrenome[50];
    int nascimento;

};

int main()
{
    //Variáveis

    int aln, i; // 'aln' indica a quantidade de alunos
    printf("Insira a quantidade de alunos a serem cadastrados: \n");
    scanf("%d", &aln);

    int struct aluno* alun = (int*) malloc(aln * sizeof(int)); //Alocando a quantiidade de alunos para a struct

    for(i = 0; i < aln; i++){
        printf("Insira a matricula do aluno: \n");
        scanf("%d", &alun[i].mat);

        printf("Insira o sobrenome do aluno: \n");
        scanf("%d", &alun[i].sobrenome);

        printf("Insira a data de nascimento do aluno: \n");
        scanf("%d", &alun[i].nascimento);
    }

    //Imprimindo
    printf("\nImprimindo dados os alunos\n");

    for(i = 0; i < aln; i++){
        printf("O aluno %d eh: %s\n", i + 1, alun[i].sobrenome);
        printf("Matricula do aluno %d: %d", i + 1, alun[i].mat);
        printf("Ano do nascimento do aluno %d: %d", i + 1, alun[i].nascimento);
    }


    return 0;
}










12.Considere um cadastro de produtos de um estoque, com as seguintes
informações para cada produto:
? Código de identificação do produto: representado por um valor
inteiro
? Nome do produto: com até 50 caracteres
? Quantidade disponível no estoque: representado por um número
inteiro
? Preço de venda: representado por um valor real
a) Defina uma estrutura, denominada produto, que tenha os campos
apropriados para guardar as informações de um produto;
b) Crie um conjunto de N produtos (N é um valor fornecido pelo usuário)
e peca ao usuário para entrar com as informações de cada produto;
c) Encontre o produto com o maior preço de venda;
d) Encontre o produto com a maior quantidade disponível no estoque.


#include <stdio.h>
#include <stdlib.h>
#include <string.h> // Necessário para string

typedef struct prod{
    int codigo;
    char nome[50];
    int qtd; // Quantidade
    float valor;//Preço do produto


};

int main()
{
    //Variáveis
    int num, i; // 'num' representa o numero do produto
    int maior, menor; // Indicam o produto de maior e menor preço



    printf("Insira o nuemro do produto a ser cadastrado: \n");
    scanf("%d", &num);

    struct produ* produtos = (produ*) malloc(num *sizeof(produ));

    for(i = 0; i < num; i++){
        printf("\nInsira o codigo do Pruduto %d\n", i + 1);
        scanf("%d", &produtos[i].codigo);

        printf("Insira o nome: \n");
        scanf("%s", &produto[i].nome);

        printf("Insira a quantidade: \n");
        scanf("%d", &produto[i].qtd);

        printf("Digite o valor do produto: \n");
        scanf("%d", &produto[i].valor);
    }

    maior = produtos[0];
    menor = produtos[0];

    for(i = 0; i < num; i++){
        if(produtos[i].valor > maior){
            maior = produtos[i];
        }else if(produtos[i].menor < maior){
            maior = produto[i];

        }
    }

    printf("codigo: %d\n", produtos.codigo);
    printf("nome: %s", produtos.nome);
    printf("Quantidade: %d\n", produtos.qtd);
    printf("preco do produto: %d", produtos.valor);
    return 0;
}








13.Escreva um programa que aloque dinamicamente uma matriz (de
inteiros) de dimensões definidas pelo usuário e a leia. Em seguida,
implemente uma função que receba um valor, retorne 1 caso o valor
esteja na matriz ou retorne 0 caso não esteja na matriz.

#include <stdio.h>
#include <stdlib.h>

int verifica(int valor, int **mat, int l, int c){
    int i, j, mat[][];
    for(i = 0; i < l; i++){
        if(mat[i][j] == valor){
            return 1;
        }
    }

    return 0;
}

int main()
{
    //Variáveis
    int linha, coluna, i, j, valor, resultado;
    int mat[][];

    printf("Insira o numero de linhas de sua matriz: \n");
    scanf("%d", &linhas);

    printf("Insira o numero de colunas de sua matriz: \n");
    scanf("%d", &coluna);

    int **mat = (int**) malloc(linhas * sizeof(int*));
    for(i = 0; i < linhas; i++){
        mat[i] = (int*) malloc(cluna * sizeof(int));
    }

    printf("Preencha sua matriz: \n");
    for(i = 0; i < linhas; i++){
        for(j = 0; j < colunas; j++){
            scanf("%d", &mat[i][j]);
        }
    }

    printf("Insira um valor para ser verificado se ele se encontra na matriz: \n");
    scanf("%d", &valor);

    resultado = verifica(valor, mat, linhas, colunas);

    if(resultado == 1){
        printf("O valor %d esta na matriz\n", valor);
    }else{
        printf("O valor nao esta na matriz\n");

    }

    return 0;
}









14.Construa um programa que leia o número de linhas e de colunas de uma
matriz de números reais, aloque espaço dinamicamente para esta e a
inicialize com valores fornecidos pelo usuário. Ao final, o programa
deverá retornar a matriz na saída padrão com layout apropriado.


#include <stdio.h>
#include <stdlib.h>

void imprime(float **mat, int lin, int cln){ //'lin' são linhas, 'cln' colunas
    int i, j;
    for(i = 0; i < lin; i++){
        for(j = 0; j < cln; j++){
            printf("%.2f", mat[i][j]);
        }
    }

}

int main()
{
   //variáveis
   int i, j, linhas, colunas;

   printf("Insira o numero de linhaas de sua matriz: \n");
   scanf("%d", linhas);

   printf("Insira o numero de colunas de sua matriz\n");
   scanf("%d", &colunas);

    float **mat = (float**) malloc(linhas *sizeof(float*));
   for(i = 0; i < linhas; i++){
    mat[i] = (float*) malloc(colunas *sizeof(float));
   }

   printf("Insira valores em sua matriz: \n");
   for(i = 0; i < linhas; i++){
    for(j = 0; j < colunas; j++){
        scanf("%f", &mat[i][j]);
    }
   }

   imprime(mat, linhas, colunas);



    return 0;
}







15.Faça um programa que leia dois números N e M e:
a) Crie e leia uma matriz de inteiros N x M;
b) Localize os três maiores números de uma matriz e mostre a linha e a
coluna onde estão.

#include <stdio.h>
#include <stdlib.h>

void localizarMaiores(int** matriz, int linhas, int colunas) {
    int maior1 = matriz[0][0];
    int maior2 = matriz[0][0];
    int maior3 = matriz[0][0];
    int linha1 = 0, coluna1 = 0;
    int linha2 = 0, coluna2 = 0;
    int linha3 = 0, coluna3 = 0;

    for (int i = 0; i < linhas; i++) {
        for (int j = 0; j < colunas; j++) {
            int valor = matriz[i][j];

            if (valor > maior1) {
                maior3 = maior2;
                linha3 = linha2;
                coluna3 = coluna2;

                maior2 = maior1;
                linha2 = linha1;
                coluna2 = coluna1;

                maior1 = valor;
                linha1 = i;
                coluna1 = j;
            } else if (valor > maior2) {
                maior3 = maior2;
                linha3 = linha2;
                coluna3 = coluna2;

                maior2 = valor;
                linha2 = i;
                coluna2 = j;
            } else if (valor > maior3) {
                maior3 = valor;
                linha3 = i;
                coluna3 = j;
            }
        }
    }

    printf("Os três maiores números da matriz são:\n");
    printf("Maior número: %d - Linha: %d - Coluna: %d\n", maior1, linha1, coluna1);
    printf("Segundo maior número: %d - Linha: %d - Coluna: %d\n", maior2, linha2, coluna2);
    printf("Terceiro maior número: %d - Linha: %d - Coluna: %d\n", maior3, linha3, coluna3);
}

int main() {
    int linhas, colunas;

    printf("Digite o número de linhas da matriz: ");
    scanf("%d", &linhas);

    printf("Digite o número de colunas da matriz: ");
    scanf("%d", &colunas);

    int** matriz = (int*) malloc(linhas * sizeof(int));
    for (int i = 0; i < linhas; i++) {
        matriz[i] = (int*) malloc(colunas * sizeof(int));
    }

    printf("\nDigite os valores da matriz:\n");
    for (int i = 0; i < linhas; i++) {
        for (int j = 0; j < colunas; j++) {
            scanf("%d", &matriz[i][j]);
        }
    }

    localizarMaiores(matriz, linhas, colunas);

    for (int i = 0; i < linhas; i++) {
        free(matriz[i]);
    }
    free(matriz);

    return 0;
}






16.Faça um programa que leia dois números N e M:
a) Crie e leia uma matriz N x M de inteiros;
b) Crie e construa uma matriz transposta M x N de inteiros;
c) Mostre as duas matrizes.


include <stdio.h>
#include <stdlib.h>

void mostrarMatriz(int** matriz, int linhas, int colunas) {
    for (int i = 0; i < linhas; i++) {
        for (int j = 0; j < colunas; j++) {
            printf("%d\t", matriz[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}

int main() {
    int linhas, colunas;

    printf("Digite o número de linhas da matriz: ");
    scanf("%d", &linhas);

    printf("Digite o número de colunas da matriz: ");
    scanf("%d", &colunas);

    // Criando e lendo a matriz N x M
    int** matriz = (int*) malloc(linhas * sizeof(int));
    for (int i = 0; i < linhas; i++) {
        matriz[i] = (int*) malloc(colunas * sizeof(int));
    }

    printf("\nDigite os valores da matriz:\n");
    for (int i = 0; i < linhas; i++) {
        for (int j = 0; j < colunas; j++) {
            scanf("%d", &matriz[i][j]);
        }
    }

    // Criando a matriz transposta M x N
    int** transposta = (int*) malloc(colunas * sizeof(int));
    for (int i = 0; i < colunas; i++) {
        transposta[i] = (int*) malloc(linhas * sizeof(int));
    }

    // Construindo a matriz transposta
    for (int i = 0; i < colunas; i++) {
        for (int j = 0; j < linhas; j++) {
            transposta[i][j] = matriz[j][i];
        }
    }

    // Mostrando as duas matrizes
    printf("\nMatriz original:\n");
    mostrarMatriz(matriz, linhas, colunas);

    printf("Matriz transposta:\n");
    mostrarMatriz(transposta, colunas, linhas);

    
    return 0;
}








17.Faça um programa que leia números do teclado e os armazene em um
vetor alocado dinamicamente. O usuário irá digitar uma sequência de
números, sem limite de quantidade. Os números serão digitados um a
um e, sendo que caso ele deseje encerrar a entrada de dados, ele irá
digitar o número ZERO. Os dados devem ser armazenados na memória
deste modo:
a) Inicie com um vetor de tamanho 10 alocado dinamicamente;
b) Após, caso o vetor alocado esteja cheio, aloque um novo vetor do
tamanho do vetor anterior adicionado espaço para mais 10 valores
(tamanho N+10, onde N inicia com 10);
c) Copie os valores já digitados da área inicial para esta área maior e
libere a memória da área inicial;
d) Repita este procedimento de expandir dinamicamente com mais 10
valores o vetor alocado cada vez que o mesmo estiver cheio. Assim o
vetor irá ser “expandido” de 10 em 10 valores.
Ao final, exiba o vetor lido. Não use a função REALLOC.


#include <stdio.h>
#include <stdlib.h>

int main() {
    int tamanho = 10;
    int *vetor = (int *)malloc(tamanho * sizeof(int));
    int indice = 0;
    int numero;

    printf("Digite os números (digite 0 para encerrar):\n");

    while (1) {
        scanf("%d", &numero);

        if (numero == 0) {
            break;
        }

        vetor[indice] = numero;
        indice++;

        if (indice == tamanho) {
            tamanho += 10;
            int *novoVetor = (int *)malloc(tamanho * sizeof(int));

            for (int i = 0; i < indice; i++) {
                novoVetor[i] = vetor[i];
            }

            free(vetor);
            vetor = novoVetor;
        }
    }

    printf("\nVetor lido:\n");
    for (int i = 0; i < indice; i++) {
        printf("%d ", vetor[i]);
    }
    printf("\n");

    free(vetor);

    return 0;
}








18.Escreva um programa para fazer a alocação dinâmica dos blocos de
dados conforme solicitado abaixo:
a) Vetor de 1024 Bytes (1 Kbyte);
b) Matriz de inteiros de dimensão 10 × 10;
c) Vetor para armazenar 50 registros contendo: nome do produto (30
caracteres), código do produto (inteiro) e preço em reais;
d) Texto de até 100 linhas com até 80 caracteres em cada linha.


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Registro{
    char nome[30];
    int codigo;
    float preco;
} 

int main() {
    // Vetor de 1024 Bytes (1 Kbyte)
    int tam_Vetor = 1024;
    char *vetor = (char *)malloc(tam_Vetor);

    // Matriz de inteiros de dimensão 10x10
    int linhas = 10;
    int colunas = 10;
    int *matriz = (int *)malloc(linhas * sizeof(int *));
    for (int i = 0; i < linhas; i++) {
        matriz[i] = (int *)malloc(colunas * sizeof(int));
    }

    // Vetor de registros
    int Registros = 50;
    Registro *registros = (Registro *)malloc(Registros * sizeof(Registro));

    // Texto de até 100 linhas com até 80 caracteres em cada linha
    int Linhas = 100;
    int Caracteres = 80;
    char *texto = (char *)malloc(Linhas * sizeof(char *));
    for (int i = 0; i < Linhas; i++) {
        texto[i] = (char *)malloc((Caracteres + 1) * sizeof(char));
    }

    // Exemplo de uso das estruturas alocadas dinamicamente
    strcpy(vetor, "Exemplo de vetor de 1024 Bytes.");
    matriz[0][0] = 10;
    registros[0].codigo = 1001;
    registros[0].preco = 9.99;
    strcpy(registros[0].nome, "Produto A");
    strcpy(texto[0], "Exemplo de texto.");

    

    return 0;
}








19.Faça um programa para associar nomes as linhas de uma matriz de
caracteres. O usuário irá informar o número máximo de nomes que
poderão ser armazenados. Cada nome poderá ter até 30 caracteres com
o '\0'. O usuário poderá usar 5 opções diferentes para manipular a
matriz:
a) Gravar um nome em uma linha da matriz;
b) Apagar o nome contido em uma linha da matriz;
c) Informar um nome, procurar a linha onde ele se encontra e substituir
por outro nome;
d) Informar um nome, procurar a linha onde ele se encontra e apagar;
e) Pedir para recuperar o nome contido em uma linha da matriz.



 ....




20.Faça um programa que:
a) Peça para o usuário entrar com o nome e a posição (coordenadas X e
Y) de N cidades e as armazene em um vetor de estruturas (N é
informado pelo usuário);
b) Crie uma matriz de distâncias entre cidades de tamanho N x N;
c) Calcule as distâncias entre cada duas cidades e armazene na matriz;
d) Exiba na tela a matriz de distancias obtida;
e) Quando o usuário digitar o número de duas cidades o programa
deverá retornar a distância entre elas.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

typedef struct cidade{
    char nome[50];
    int x;
    int y;
} ;

float Distancia(Cidade cidade1, Cidade cidade2) {
    int deltaX = cidade2.x - cidade1.x;
    int deltaY = cidade2.y - cidade1.y;
    return sqrt(deltaX * deltaX + deltaY * deltaY);
}

int main() {

    //variáveis
    int n;
    printf("Digite o número de cidades: ");
    scanf("%d", &n);

    Cidade* cidades = (Cidade*)malloc(n * sizeof(Cidade));
    float** matrizDistancias = (float*)malloc(n * sizeof(float));
    for (int i = 0; i < n; i++) {
        matrizDistancias[i] = (float*)malloc(n * sizeof(float));
    }

    // Entrada de dados das cidades
    for (int i = 0; i < n; i++) {
        printf("Digite o nome da cidade %d: ", i + 1);
        scanf(" %d", cidades[i].nome);
        printf("Digite a posição X da cidade %d: ", i + 1);
        scanf("%d", &cidades[i].x);
        printf("Digite a posição Y da cidade %d: ", i + 1);
        scanf("%d", &cidades[i].y);
    }

    // Cálculo das distâncias entre as cidades
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            matrizDistancias[i][j] = Distancia(cidades[i], cidades[j]);
        }
    }

    // Exibição da matriz de distâncias
    printf("Matriz de distâncias:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%.2f\t", matrizDistancias[i][j]);
        }
        printf("\n");
    }

    // Cálculo da distância entre duas cidades específicas
    int cidade1, cidade2;
    printf("Digite o número das duas cidades (de 0 a %d) para calcular a distância entre elas: ", n - 1);
    scanf("%d %d", &cidade1, &cidade2);
    float distancia = matrizDistancias[cidade1][cidade2];
    printf("Distância entre as cidades %d e %d: %.2f\n", cidade1, cidade2, distancia);

    
    return 0;
}







21.Faça um programa que leia quatro números a, b, c e d, que serão as
dimensões de duas matrizes, e:
a) Crie e leia uma matriz, dadas as dimensões dela;
b) Crie e construa uma matriz que seja o produto de duas matrizes. Na
sua função main(), imprima as duas matrizes e o produto entre elas,
se existir.


....