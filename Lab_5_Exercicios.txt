Lab_5 Gustavo Marques Oliveira 

1. Faça um programa que possua um vetor denominado A que armazene 6 números inteiros.
O programa deve executar os seguintes passos:
a) Atribua os seguintes valores a esse vetor: 1, 0, 5, -2, -5, 7.
b) Armazene em uma variável inteira (simples) a soma entre os valores das posições
A[0], A[1] e A[5] do vetor e mostre na tela esta soma.
c) Modifique o vetor na posição 4, atribuindo a esta posição o valor 100.
d) Mostre na tela cada valor do vetor A, um em cada linha.

#include <stdio.h>
#include <stdlib.h>

int main()
{
   int Vet[6], soma = 0, i;
   Vet[0] = 1;
   Vet[1] = 0;
   Vet[2] = 5;
   Vet[3] = -2;
   Vet[4] = 100;
   Vet[5] = 7;

   /*for(i = 0; i < 6; i++){
   soma = soma + Vet[i];
   }
   */

   for(i = 0; i < 6; i++){
        printf("Vet[%d] = %d\n", i, Vet[i]);

   }
   soma = Vet[0] + Vet[1] + Vet[5];
   printf("A soma eh: %d\n", soma);

   return 0;


}





2. Faça um programa que leia um vetor de 8 posições e, em seguida, leia também dois valores
X e Y quaisquer correspondentes a duas posições no vetor. Ao final seu programa deverá
escrever a soma dos valores encontrados nas respectivas posições X e Y.

#include <stdio.h>
#include <stdlib.h>

int main()
{
    int Vet[8], i, x, y;
        for(i= 0; i < 8; i++){
            printf("Insira um valor na posicao Vet[%d]\n", i);
            scanf("%d", Vet[i]);
        }
        printf("Insira duas posicoes do vetor: \n");
        scanf("%d %d", &x, &y);

        printf("A soma dessas posicoes eh: %d\n", Vet[x] + Vet[y]);

        return 0;
}





3. Crie um programa que lê 6 valores inteiros e, em seguida, mostre na tela os valores lidos na
ordem inversa.

#include <stdio.h>
#include <stdlib.h>

int main()
{
    int Vet[6], i;
    for(i = 0; i < 6; i++){
        printf("Insira os valores nas posicoes do vetor: Vet[%d]\n", i);
        scanf("%d", &Vet[i]);
    }
    for(i = 5; i >= 0; i--){
        printf("Vet[%d] = %d\n", i, Vet[i]);
    }
    return 0;
}





4. Fazer um programa para ler 5 valores e, em seguida, mostrar a posição onde se encontram
o maior e o menor valor.

#include <stdio.h>
#include <stdlib.h>

int main()
{
    int Vet[5], i, maior = 0, menor = Vet[0];
    for(i = 0; i < 5; i++){
        printf("Insira valores para as posicoes dos vetores: Vet[%d]\n", i);
        scanf("%d", &Vet[i]);
    }
    for(i = 0; i < 5; i++){
        if(Vet[i] > maior){
            maior = Vet[i];
        }
    }
    for(i = 0; i < 5; i++){
        if(Vet[i] < menor){
            menor = Vet[i];
        }
    }
    printf("O maior eh %d o menor eh %d\n", maior, menor);
    return 0;
}




5. Faça um vetor de tamanho 50 preenchido com o seguinte valor: (i+5*i)%(i+1), sendo i
a posição do elemento no vetor. Em seguida imprima o vetor na tela.

#include <stdio.h>
#include <stdlib.h>

int main()
{
    int Vet[50], i;
    for(i = 0; i < 50; i++){
        Vet[i] = (i + 5 * i) % (i + 1);
    }
    for(i = 0; i < 50; i++){
        printf("[%d]\n", Vet[i]);
    }
    return 0;
}





6. Leia 10 números inteiros e armazene em um vetor. Em seguida escreva os elementos que
são primos e suas respectivas posições no vetor.

#include <stdio.h>
#include <stdlib.h>

int main()
{
   int Vet[10], i, cont, resultado;
    for(i = 0; i < 10; i++){
        printf("Insira 10 valores para as posicoes dos vetores: Vet[%d]\n", i);
        scanf("%d", &Vet[i]);
    }
    for(cont = 2; cont <= Vet[i]; cont++){
        if(Vet[i] % cont == 0){
            resultado++;
            break;
        }

    }
    if(resultado == 0){
        printf("Os numeros primos sao %d\n", Vet[i]);
    }else{
        printf("Nao eh um numero primo\n");

    }


    return 0;
}




7. Faça um programa que receba 6 números inteiros e mostre:
? Os números pares digitados;
? A soma dos números pares digitados;
? Os números ímpares digitados;
? A quantidade de números ímpares digitados;

include <stdio.h>
#include <stdlib.h>

int main()
{
    int Vet[10], i, par, impar, soma = 0;
    for(i = 0; i < 10; i++){
        printf("Insira 10 valores para as posicoes dos vetores: Vet[%d]\n", i);
        scanf("%d", &Vet[i]);
    }
    do{
    if(Vet[i] > 0){
        if(Vet[i] % 2 == 0)
            par ++;
        else
            impar ++;
    }

    }while(Vet[i] != 0);
    printf("A quantidade de numeros impares digitados eh: %d\n", impar);

    soma += soma + par;
    printf("A soma dos numeros pares digitados eh: %d\n", par);

    return 0;
}





8. Faça um programa para ler 10 números DIFERENTES a serem armazenados em um vetor. Os
dados deverão ser armazenados no vetor na ordem que forem sendo lidos, sendo que caso
o usuário digite um número que já foi digitado anteriormente, o programa deverá pedir para
ele digitar outro número. Note que cada valor digitado pelo usuário deve ser pesquisado no
vetor, verificando se ele existe entre os números que já foram fornecidos. Exibir na tela o
vetor final que foi digitado.


#include <stdio.h>
#include <stdlib.h>

int main()
{
  int Vet[10], i;
    for(i = 0; i < 10; i++){
        printf("Insira 10 valores para as posicoes dos vetores: Vet[%d]\n", i);
        scanf("%d", &Vet[i]);
    }

    return 0;
}










- Matrizes
1. Leia uma matriz 4 × 4, conte e escreva quantos valores maiores que 10 ela possui.

#include <stdio.h>
#include <stdlib.h>

int main()
{
  /* int mat[4] [4];
   int i, j, cont;
   printf("Insira os elementos da matriz: \n");
   for(i = 0; i < 4; i++)
   for(j = 0; j < 4; j++){
    scanf("%d", &mat[i] [j]);
   }
   if(mat[i][j] > 10){
    for(cont = 0; cont <= mat[i][j]; cont++){
        printf("A quantidade de elementos dentro da matriz que sao maiores que 10 sao: %d\n", cont);
     }
   }*/

 int vetorA[4][4];
int maior[4][4];
int i, j;


printf("Digite os numeros do vetor:\n");
    for(i=0; i<4; i++)
    {
    for (j = 0; j < 4; j++)
    {
    scanf("%d", &vetorA[i][j]);
    }
    }

    for (i = 0; i < 4; i++)
    {
    for (j = 0; j < 4; j++)
    {
    if(vetorA[i][j]>10)
    {
    maior[i][j] = vetorA[i][j];
    }
    else
    {
    maior[i][j] = 0;
    }

    }
    }


    printf("\n\n\n");
    printf("Os valores da matriz sao: \n");
    for (i = 0; i < 4; ++i)
    {
    for (j = 0; j < 4; ++j)
    {
    printf("%d\t", vetorA[i][j]);
    }
    printf("\n");
    }

    printf("\n\n\n");
    printf("Os valores maiores que 10 sao: \n");
    for (i = 0; i < 4; ++i)
    {
    for (j = 0; j < 4; ++j)
    {
    printf("%d\t", maior[i][j]);
    }
    printf("\n");
    }



system("pause");


   return 0;

}







2. Declare uma matriz 5 × 5. Preencha com 1 a diagonal principal e com 0 os demais elementos.
Escreva ao final a matriz obtida.

#include <stdio.h>
#include <stdlib.h>

int main()
{
    int mat[5][5];
    int i, j;
    for(i = 0; i < 5; i++)
    for(j = 0; j < 5; j++){
        mat[i][j] = (i == j)? 1:0;
        printf("\n");
        printf("A matriz eh %d\n", mat[i][j]);
    }
    return 0;
}






3. Leia uma matriz 4 × 4, imprima a matriz e retorne a localização (linha e a coluna) do maior
valor.

#include <stdio.h>
#include <stdlib.h>

int main()
{
    int Mat[4][4];
    int i, j, local[3];
    printf("Insira os valores na matriz 4x4: \n");

    for(i = 0; i < 4; i++){
        for(j = 0; j < 4; j++){
            scanf("%d", &Mat[i][j]);
        }
    }
    // valores para local
    local[0] = 0;
    local[1] = 0;
    local[2] = Mat[0][0];

    // comparando os valores na matriz
    for(i = 0; i < 4; i++){
        for(j = 0; j < 4; j++){
            if(Mat[i][j] > local[2]){
                local[0] = i;
                local[1] = j;
                local[2] = Mat[i][j];
            }
        }
    }
    //mostrando valores
    for(i = 0; i < 4; i++){
        for(j = 0; j < 4; j++){
            printf("%d", Mat[i][j]);
        }
        printf("\n");
    }
    printf("A maior posicao eh: linha %d e coluna %d\n", i, j);

    return 0;
}






4. Leia uma matriz 5 × 5. Leia também um valor X. O programa deverá fazer uma busca desse
valor na matriz e, ao final, escrever a localização (linha e coluna) ou uma mensagem de “não
encontrado”.

#include <stdio.h>
#include <stdlib.h>

int main()
{
    int Mat[4][4];
    int i, j, local[3];
    printf("Insira os valores na matriz 4x4: \n");

    for(i = 0; i < 4; i++){
        for(j = 0; j < 4; j++){
            scanf("%d", &Mat[i][j]);
        }
    }
    // valores para local
    local[0] = 0;
    local[1] = 0;
    local[2] = Mat[0][0];

    // comparando os valores na matriz
    for(i = 0; i < 4; i++){
        for(j = 0; j < 4; j++){
            if(Mat[i][j] > local[2]){
                local[0] = i;
                local[1] = j;
                local[2] = Mat[i][j];
            }
        }
    }
    //mostrando valores
    for(i = 0; i < 4; i++){
        for(j = 0; j < 4; j++){
            printf("%d", Mat[i][j]);
        }
        printf("\n");
    }
    printf("A maior posicao eh: linha %d e coluna %d\n", i, j);

    return 0;
}





5. Gerar e imprimir uma matriz de tamanho 10 × 10, onde seus elementos são da forma:
A[i][j] = 2i + 7j - 2 se i < j;
A[i][j] = 3i
2
- 1 se i = j;
A[i][j] = 4i
3 – 5j
2 + 1 se i > j:

#include <stdio.h>
#include <stdlib.h>
#include<math.h>

int main()
{
    int Mat[10][10];
    int i, j;
    // Lendo a matriz
    for(i = 0; i < 10; i++){
        for(j = 0; j < 10; j++){
            printf("Insira valores na matriz [%d][%d]\n", i + 1, j + 1);
            scanf("%d", &Mat[i][j]);
        }
    }
    // Atribuindo as condiçoes para os valores

    for(i = 0; i < 10; i++){
        for(j = 0; j < 10; j++){
            printf("\n%d", Mat[i][j]);

            if(i < j){
                Mat[i][j] = 2*i + 7 * j - 2;
                printf("A linha eh menor que a coluna entao o valor que se encontra na posicao [%d][%d] eh %d\n", i, j, Mat[i][j]);
            }else if(i == j){
                Mat[i][j] = 3 * pow(i,2) - 1;
                 printf("A linha eh igual que a coluna entao o valor que se encontra na posicao [%d][%d] eh %d\n", i, j, Mat[i][j]);


            }else{
                Mat[i][j] = 4 * pow(i,3) - 5 * pow(j,2) + 1;
                 printf("A linha eh maior que a coluna entao o valor que se encontra na posicao [%d][%d] eh %d\n", i, j, Mat[i][j]);

            }
        }
    }
    return 0;
}







6. Gere matriz 4 × 4 com valores no intervalo [1, 20]. Escreva um programa que transforme a
matriz gerada numa matriz triangular inferior, ou seja, atribuindo zero a todos os elementos
acima da diagonal principal. Imprima a matriz original e a matriz transformada.

#include <stdio.h>
#include <stdlib.h>

int main()
{
    int Mat[4][4];
    int i, j;

    // Inserindo valores no intervalo de [1 a 20] na matriz
    for(i = 0; i < 4; i++){
        for(j = 0; j < 4; j++){
            printf("Insira valores na matriz[%d][%d] em m intervalo de 1 a 20: \n ", i + 1, j + 1);
            scanf("%d", &Mat[i][j]);
        }

    }
    printf("\n\n");

    //Transformando a matriz em uma matriz triangular inferior

    for(i = 0; i < 4; i++){
        for(j = 0; j < 4; j++){
            if(i > j){
                Mat[i][j] = 0;
            }
        }
        printf("A matriz triangular eh %6d\n", Mat[i][j]);

    }
    return 0;
}







7. Faça um programa para gerar automaticamente números entre 0 e 99 de uma cartela de
bingo. Sabendo que cada cartela deverá conter 5 linhas de 5 números, gere estes dados de
modo a não ter números repetidos dentro das cartelas. O programa deve exibir na tela a
cartela gerada.


#include <stdio.h>
#include <stdlib.h>
#include <time.h>
/// A tabela time.h foi inserida para gerar numeros aleatorios no codigo

int main()
{
int Mat[5][5];
int i,j, Vet[25], teste; // O vetor e a variável teste são para evitar a repetição de numeros

  srand(time(NULL));// condicao para gerar nuumeros aleatorios


  // Garantindo que não haverá repetiçoes na cartela
   for(i = 0; i < 5; i++){
    for(j = 0; j < 5; j++){
        do{
            Vet[i] = rand() % 50;
            teste = 0;
            for(j = 0; j < i; j++){
                if(Vet[j] == Vet[i]){
                    teste = 1;
                }

            }
            if(teste == 0){
                i++;
            }
        } while(i < 25);

        Mat[i][j] = Vet[i];

    }
   }

   //Imprimindo a Tabela
   for(i = 0; i < 5; i++){
        for(j = 0; j < 5; j++){
            printf("%6d", Mat[i][j]);
        }
        printf("\n");
   }
   printf("\n\n");

    return 0;
}








8. Faça um programa que leia duas matrizes 2 × 2 com valores reais. Ofereça ao usuário um
menu de opções:
a) somar as duas matrizes
b) subtrair a primeira matriz da segunda
c) adicionar uma constante às duas matrizes
d) imprimir as matrizes


include <stdio.h>
#include <stdlib.h>

int main()
{
    float mat1[2][2], mat2[2][2]; // mat1 e mat2 são matrizes 2 por 2
    int i, j, a; // a será o valor constante que poderá ser adicionado
    char opcao;

    // inserindo valores na primeira matriz
    for(i = 0; i < 2; i++){
        for(j = 0; j < 2; j++){
            printf("Insira valores na matriz [%d][%d]\n", i + 1, j + 1);
            scanf("%d", &mat1[i][j]);
        }
    }
    printf("\n");

    printf("Insira valores na segunda matriz: \n");

    for(i = 0; i < 5; i++){
        for(j = 0; j < 5; j++){
            printf("Insira valores na segunda matriz[%d][%d]: \n", i + 1, j + 1);
            scanf("%d", &mat2[i][j]);
        }
    }
    printf("\n");
    // Menu de opções
    printf("Escolha uma das seguintes opcoes para opercoes com matrizes: \n");
    printf("\na) Somar matrizes\nb) Subtrair primeira matriz da segunda\nc) Adicionar uma constante as duas matrizes\nd) Imprimir matrizes\ne) Encerrar programa\n");

    do { // Valores atribuidos de acordo com as opcoes
        switch(opcao){
        case 'a':
            for(i = 0; i < 2; i++){
                for(j = 0; j < 2; j++){
                    mat2[i][j] += mat1[i][j];
                }
            }
            printf("A soma foi executada com sucesso\n");
            break;

         case 'b':
            for(i = 0; i < 2; i++){
                for(j = 0; j < 2; j++){
                    mat2[i][j] -= mat1[i][j];
                }
            }
            printf("A subtracao foi executada com sucesso\n");
            break;

          case 'c':
            printf("Insira um valor constante: \n");
            scanf("%f", &a);
            for(i = 0; i < 2; i++){
                for(j = 0; j < 2; j++){
                    mat1[i][j] += a;
                    mat2[i][j] += a;
                }
            }

            printf("A soma foi executada com sucesso\n");
            break;

           case 'd':
            printf("A matriz 1 eh [%d][%d]\n", mat1[i][j]);
            printf("A matriz 2 eh [%d][%d]\n", mat2[i][j]);

            break;

           case 'e':
            printf("Programa encerrado\n");
            break;

        }while(opcao != 'e');

    return 0;
}













- Strings
1. Faça um programa que leia uma string e a imprima.

#include <stdio.h>
#include <stdlib.h>
#include<string.h>

int main()
{
    // Variável

    char str[4];
    printf("Insira o nome UFU: \n");
    fflush(stdin);
    fgets(str, 5, stdin);
    printf("\n%s\n", str);


    return 0;
}



2. Faça um programa que conte o número de 1’s que aparecem em uma string. Exemplo:
“0011001” -> 3


#include <stdio.h>
#include <stdlib.h>

int main()
{
  // Vriáveis, contador conta quantas veze o numero 1 apareceu
  char str[10];
  int i, contador = 0;

  printf("Insira um valor de ate 10 algarismos: \n ");
  fflush(stdin);
  gets(str);

  // loop para a contagem de numeros 1's
  for(i = 0; i < 10; i++){
    if(str[i] == 1){
        contador ++;
    }else{
        break;
    }
  }
  // condição para o contador
  if(contador == 1){
    printf("O numero 1 foi detectado apenas uma vez na string\n");
  }else{
    printf("O numero 1 apareceu %d vezes na string: \n", contador);

  }


    return 0;
}



3. Faça um programa que receba uma palavra e a imprima de trás-para-frente.

#include <stdio.h>
#include <stdlib.h>

int main()
{
    // Variaveis, a variável tamnho guarda o comprimento da string

    char str[10];
    int tamanho, i;

    printf("Escreva uma palavra de ate 10 caracteres: \n");
    fflush(stdin);
    fgets(str, 10, stdin);
    tamanho = strlen(str); // strlen foi usado para armazenar o tamnho da string

    //loop para imprimir a palavra ao contrario

    for(i = 0; i >= 10; i--){ // Dessa forma o programa ira imprimir do ultimo
        printf("%c", str[i]); // caractere para o primeiro
    }


    return 0;
}






4. Faça um programa que receba uma palavra e calcule quantas vogais (a, e, i, o, u) possui essa
palavra. Entre com um caractere (vogal ou consoante) e substitua todas as vogais da palavra
dada por esse caractere.

#include <stdio.h>
#include <stdlib.h>

int checar_vogal(char check[]);       // Essa função foi criada para checar
int vogal(char v);                    // se ha vogais, se a variavel char é vogal e substtui as vogais
void substitui(char check[], char a);

int main()
{
   // Declarando a string
   char str[26], vogal;
   int a; // checa as vogais

   printf("Escreva uma palavra que apresente ate 26 caracteres: \n");
   fflush(stdin);
   fgets(str, 26, stdin);
   a = checar_vogal(str);
   // Condiçoes para as vogais
   if(a == 1){
    printf("A palavra inserida tem apenas uma vogal\n");
   }else{
   printf("A palavra tem %d vogais\n", a);
   }
   if(a != 0){
    printf("Insira um novo caractere para tomar o lugar das vogais na palavra\n");
    fflush(stdin);
    scanf("%c", &vogal);

    substitui(str, vogal); // A função que substitui a vogal foi chamada
   }

    return 0;
}

int checar_vogal(char check[]);
int i, contador; // a variável contadora irá contar as vogais
for(i = 0; i < 26 ; i++){
    if(vogal[i] == '\0'){

    }
        break;
    }else if(checar_vogal(check[i])){
        contador++
        return contador;
    }

    int vogal(char v){
        switch(c){   /// Tabela ASCII para as vogais em letras maiusculas e minusculas
        case 65: // A
        case 69: // E
        case 73: // I
        case 79: // O
        case 85: // U
        case 97: // a
        case 101: // e
        case 105: // i
        case 111: // 0
        case 117: // u
            return 1;
            break;



        }




    }

    void substitui(char check[], char l){
        // variável
        int i;
        for(i = 0; ; i++){
            if(check[i] == '\0'){
                break;
            }else if(vogal[check[i]){
                check[i] = 1;
            }
        }



    }

    printf("%s", check);

    }





5. Escreva um programa para converter uma cadeia de caracteres de letras maiúsculas em letras
minúsculas. Dica: some 32 dos caracteres cujo código ASCII está entre 65 e 90.

#include <stdio.h>
#include <stdlib.h>
#include<string.h>

void maiusculo(char texto[], int opcao)  /// Função criada para converter letras maiusculas para minusculas

int main()
{
    // variáveis
    char str[26];
    printf("Escreva uma palavra de ate 26 caracteres.\n");
    fflush(stdin);
    fgets(str, 26, stdin);
    maiusculo(str, 1);
    return 0;
}
void maiusculo(char texto[], int opcao){
    //Variável
     int i;

     // loop para converter de letras maiusculas para minusculas até que um \0 seja encontrado

     if(opcao){
        for(i = 0; ; i++){
            if(texto[i] == '\0');
            break;
        }else if(texto[i] >= 65 && texto[i] <= 90){
            texto[i] += 32;

        }
     } else{
        for(i = 0; ; i++){
            if(texto[i] == '\0'){
                break;
            }else if(texto[i] >= 97 && texto[i] <= 127){
                texto[i] -= 32;

            }
        }

     }

     printf("%s", texto);
}






6. Leia uma cadeia de caracteres e converta todos os caracteres para maiúscula. Dica: subtraia
32 dos caracteres cujo código ASCII está entre 97 e 122.

#include <stdio.h>
#include <stdlib.h>
#include<string.h>

void maiusculo(char texto[], int opcao)  /// Função criada para converter letras maiusculas para minusculas

int main()
{
    // variáveis
    char str[26];
    printf("Escreva uma palavra de ate 26 caracteres.\n");
    fflush(stdin);
    fgets(str, 26, stdin);
    maiusculo(str, 1);
    return 0;
}
void maiusculo(char texto[], int opcao){
    //Variável
     int i;

     // loop para converter de letras maiusculas para minusculas até que um \0 seja encontrado

     if(opcao){
        for(i = 0; ; i++){
            if(texto[i] == '\0');
            break;
        }else if(texto[i] >= 65 && texto[i] <= 90){
            texto[i] += 32;

        }
     } else{
        for(i = 0; ; i++){
            if(texto[i] == '\0'){
                break;
            }else if(texto[i] >= 97 && texto[i] <= 127){
                texto[i] -= 32;

            }
        }

     }

     printf("%s", texto);
}





7. Leia um vetor contendo letras de uma frase inclusive os espaços em branco. Retirar os
espaços em branco do vetor e depois escrever o vetor resultante.

#include <stdio.h>
#include <stdlib.h>
#include<string.h>

int espaco_b(char b); // Este irá detectar um espaço em branco
void remover(char str[]); // Este irá eliminar o espaço em branco

int main()
{
   // Variável
   char palavra[26];
   printf("Insira uma palavra de ate 26 caracteres: \n");
   fflush(stdin);
   fgets(palavra, 26, stdin);

   remover(palavra);
    return 0;
}
int espaco_b(char b){
    switch(b){
    case '':
    case '\t':
    case '\n':
    case '\v':
    case '\f': return 1; break;
    return 0;

    }

}
void remover(char str[]){
    //variáveis
    int i;

    //loop para a remoção
    for(i = 0; ;i++){
        if(str[i] == '\0'){
            break;
        }else if(checar_b(str[i])){
        continue;
        else printf("%c", str[i]);
        }

    }
    return;

}






8. Faça um programa em que troque todas as ocorrências de uma letra L1 pela letra L2 em
uma string. A string e as letras L1 e L2 devem ser fornecidas pelo usuário.

#include <stdio.h>
#include <stdlib.h>
#include<string.h>

int checar_letra(char in, char igual){ // função para checar e comparar a letra
    if(in == igual){
        return 1;
    }else{
        return 0;

    }

}
void substitui(char str[]){ // Função para substituir
    // Variáveis L1 e L2 serão substituidos
    char L1, L2;
    int i;
    printf("Insira uma letra para ser substituida.\n");
    fflush(stdin);
    scanf("%c", &L1);

    printf("Escreva a letra que ira substituir a anteriror.\n");
    fflush(stdin);
    scanf("%c", &L2);

    for(i = 0;i < str[i] ; i++){
        if(str[i] == '\0'){
            break;
        }else if(checar_letra(str[i], L1)){
            str[i] = L2;

        }
    }
        printf("%s", str);
}


int main()
{
   // Variaveis
   char palavra[26];
   printf("Insira uma palavra de ate 26 caracteres: \n");
   fflush(stdin);
   fgets(palavra, 26, stdin);

   substitui(palavra);
   printf("\n\n");

    return 0;
}





9. Faça um programa que preencha uma matriz de string com os modelos de cinco carros
(exemplos de modelos: Fusca, Gol, Vectra, etc.). Em seguida, preencha um vetor com o consumo
desses carros, isto é, quantos quilômetros cada um deles faz com um litro de combustível.
Calcule e mostre:
a) O modelo de carro mais econômico;
b) Quantos litros de combustível cada um dos carros cadastrados consome para
percorrer uma distância de 1.000 quilômetros.


#include <stdio.h>
#include <stdlib.h>
#include<string.h>

int main()
{
   // Variaveis
   char carro[5][5]; // Marcas dos carros
   float economico[5], mais_econ; // Qual eh eficiente
   int i, posicao;// posicao

   //loop que identifica os carros
   printf("Insira quais sao os modelos dos carros: \n");
   for(i = 0; i < 5; i++){
    fflush(stdin);
    fgets(carro[i], 5, stdin);
   }

   // loop para a eficiência
   printf("Qual eh a kilometragem por litro que cada carro faz? \n");
   for(i = 0; i < 5; i++){
    printf("%f", economico[i]);
   }

   //imprimindo

    for(i = 0; i < 5; i++){
    printf("n%s %fKm/l",carro[i], economico[i]);
   }

   mais_econ = economico[0];
   posicao = 0;
    for(i = 0; i < 5; i++){
        if(economico[i] > mais_econ){
            mais_econ = economico[i];
            posicao = i;
        }

   }
   printf("O carro mais economico eh: %s\n", carro[i]);


    return 0;
}




10. Ler o nome e o valor de uma determinada mercadoria de uma loja. Sabendo que o desconto
para pagamento à vista é de 10% sobre o valor total, calcular o valor a ser pago à vista. Escrever
o nome da mercadoria, o valor total, o valor do desconto e o valor a ser pago à vista.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main()
{
    // variáveis
    char produto[10];
    float valor;

    printf("Insira qual eh o nome do produto. \n");
    fflush(stdin);
    fgets(produto, 10, stdin);

    printf("Digite o preco do produto: \n");
    scanf("%f", &valor);

    printf("\n%s", produto);

    printf(" O valor eh %.2f\n  com %2f de desconto\n resultando em um total de %.2f\n", valor, (valor/10), (valor * 0.9));


    return 0;
}





11. Escreva um programa que recebe uma string S e inteiros não-negativos i e j e imprima o
segmento S[i..j].

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void escrever_string(char str[]){ // função que escreve strings
    //Variáveis
    int i, j;
    do{
        printf("Insira o novo caractere para a string: \n");
        scanf("%d", &i);

        printf("Digite o valor que terminara a string: \n");
        scanf("%d", &j);

        if(i >= j){
            printf("Sempre o primeiro numero deve ser maior\n");
        }
        if(i > 26 || i > 26){
            printf("Valor invalido!\n");
        }
    }while(i >= j);

    printf("\n");
    for(i = 0; i <= j; i++){
        printf("%c", str[i]);
    }


}

int main()
{
  // variáveis
  char valor[26];

  printf("Escreva uma palavra de ate 26 caracteres: \n");
  fflush(stdin);
  fgets(valor, 26, stdin);

    return 0;
}





12. O código de César é uma das mais simples e conhecidas técnicas de criptografia. É um tipo
de substituição na qual cada letra do texto substituída por outra, que se apresenta no alfabeto
abaixo dela um número fixo de vezes. Por exemplo, com uma troca de três posições, ‘A’ seria
substituído por ‘D’, ‘B’ se tornaria ‘E’, e assim por diante. Implemente um programa que faça
uso desse Código de César (3 posições), entre com uma string e retorne a string codificada.
Exemplo:
String: a ligeira raposa marrom saltou sobre o cachorro cansado
Nova string: D OLJHLUD UDSRVD PDUURP VDOWRX VREUH R FDFKRUUR FDQVDGR

#include <stdio.h>
#include <stdlib.h>
#include<string.h>

void Cesar(char str[], int a){ // Função César, a é o numero de rotações
    // Varaiáveis armazenam os dados para a posição da string
    int i, teste;

    // loop
    for(i = 0; i < 26; i++){
        if(str[i] == '\0'){
            break;
        }else{
        teste = checar(str[i]);

        }if(teste == 1){
        str[i] += a;

        }else if(teste == 2){
        str[i] -= 32; // ajuste para overflow de Z a A
        str[i] += 3; // ajuste para underflow de A a Z

        }
    }
    // imprime
    printf("%s", str);


}

int checar(char b){
    if(b >= 65 && b <= 90){
        return 1;
    }else if(b >= 97 && b <= 127){  // Retorna 1 se char for de A-Z, ou retorna 2 se char for de a-z
        return 2;

    }else{
        return 0;

    }


}

int main()
{
   //Variáveis
   char texto[26];
   printf("Digite uma palavra de ate 26 caracteres : \n");
   fflush(stdin);
   fgets(texto, 26, stdin);

   Cesar(texto, 3);
    return 0;
}





13. Faça um programa que, dada uma string, diga se ela é um palíndromo ou não. Lembrando
que um palíndromo é uma palavra que tenha a propriedade de poder ser lida tanto da direita
para a esquerda como da esquerda para a direita.
Exemplo:
ovo
arara
Socorram-me, subi no ônibus em Marrocos
Anotaram a data da maratona

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int checar_ponto(char a){ // Função que checa se um caractere é ponto ou espaço
    if(a >= 32 && a <= 47 || a >= 58 && a <= 64){
        return 1;
    }else{              /// Retorna 1 se for de ponto ou espaço
        return 0;
    
    }

}

int check(char b // Função que checa se char é uma letra 
    if(b >= 65 && b <= 90){
        return 1;
    }else if(b >= 97 && b <= 127){ /// retorna 1 se for de A-Z, ou retorna 2 se for de a-z
        return 2;
    
    } else{
        return 0;
    
    }
    


}
int main()
{
    // Variáveis
    char texto[50], palindromo[50];
    int tamanho, i, j;
    printf("Escreva uma palavra de no maximo 50 caraccteres: \n");
    fflush(stdin);
    fgets(texto, 50, stdin);
    
    // Removendo da string espaçoes e pontuação
    for(i = 0; i < 50; i++){
        if(texto[i] == '\0'){
            break;
        }else if(checar_ponto(texto[i])){
            do{
                for(j = i; j < 50; j++){
                    texto[j] = texto [j + 1];
                }
                
            }while(checar_ponto(texto[i]));
        
        }
        if(check(texto[i]) == 2){
            texto[i] -= 32;
        }
    }
    // invertendo e comparando
    tamanho = strlen(texto);
    tamanho -= 2;
   
   j = 0;
   for(i = tamanho; i >= 0; i--){
    palindromo[j] = texto[i];
    j++;
   }
   for(i = 0; i < tamanho; i++){
    if(texto[i] == '\0'){
        break;
    }else if(texto[i] == palindromo[i]){
        continue;
    }else{
        comprimento -= -1;
        break;
      }
   }
   if(tamanho == -1){
    printf("Nao eh um palindromo\n");
   }
   
   
   
    return 0;
}






14. Implemente um programa que leia duas strings, str1 e str2, e um valor inteiro positivo N.
Concatene não mais que N caracteres da string str2 à string str1 e termine str1 com ‘\0’.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void concatenar(char str1[], char str2[], int letras){ // Função que concatena a segunda string na primeira
    str2[letras] = '\0';
    strcat(str1, str2);
    printf("%s", str1);

}

int main()
{
  // Variáveis
  char str1[26], str2[26];
  int quantidade, i;

  printf("Escreva duas palavras de no maximo 26 caracteres: \n");
  fflush(stdin);
  fgets(str1, 26, stdin);
  fflush(stdin);
  fgets(str2, 26, stdin);

  printf("Qunatos carateres voce deseja concatenar? \n");
  scanf("%d", &quantidade);

  printf("\n");
  concatenar(str1, str2, quantidade);



    return 0;
}





15. Faça um programa que contenha um menu com as seguintes opções:
a) Ler uma string S1 (tamanho máximo 20 caracteres);
b) Imprimir o tamanho da string S1;
c) Comparar a string S1 com uma nova string S2 fornecida pelo usuário e imprimir o
resultado da comparação;
d) Concatenar a string S1 com uma nova string S2 e imprimir na tela o resultado da
concatenação;
e) Imprimir a string S1 de forma reversa;
f) Contar quantas vezes um dado caractere aparece na string S1. Esse caractere desse
ser informado pelo usuário;
g) Substituir a primeira ocorrência do caractere C1 da string S1 pelo caractere C2. Os
caracteres C1 e C2 serão lidos pelo usuário;
h) Verificar se uma string S2 é substring de S1. A string S2 deve ser informada pelo
usuário;
i) Retornar uma substring da string S1. Para isso o usuário deve informar a partir de
qual posição deve ser criada a substring e qual é o tamanho da substring.



#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void menu{ // Função que mostra o menu
    printf("ESCOLHA QUAL OPCAO ABAIXO VOCE DESEJA UTILIZAR: \n");
    printf("\na) Ler uma string de no maximo 20 caracteres.\n");
    printf("\nb) Imprimir o tamanho da string S1.\n");
    printf("\nc) Comparar a sua primeira string com a segunda.\n");
    printf("\nd) Concatenar a primeir string com a segunda e imprimir.\n");
    printf("\ne) Imprimir a primeira string de forma reversa.\n");
    printf("\nf) Contar quantas vezes o caractere aparece na string.\n");
    printf("\ng) Substituir o primeiro caractere da primeira sitring pelo segundo caractere.\n");
    printf("\nh) Verificar se uma string e substring da outra.\n");
    printf("\ni) Retornar a substring da primeira string.\n");
    printf("\nj) Sair.\n");

}

void opcao(char c){ // Função para a seleção no menu
    switch (c){
    case 'a': editor(); break;
    case 'b': tamanho(); break;
    case 'c': comparar(); break;
    case 'd': concatenar(); break;
    case 'e': Reverso(); break;
    case 'f': contador(); break;
    case 'g': substitui(); break;
    case 'h': substring(); break;
    case 'i': substring_1(); break;

    default: printf("Opcao invalida!\n");

    return;

    }
}

void editor(){ // Função para editar a primeira string
    printf("Digite a sua primeira string: \n");
    scanf("%s", &S1);
    return;
}

void tamanho(){ // Função para indiar o tamanho
    int compr;
    compr = strlen(S1);
    printf("A sua string possui %d caracteres\n", compr);
    return;
}
void comparar(){ // Função para comparar as duas strings
    //variável
    char S2[20];
    printf("Digite outra string para ser comparada: \n");
    scanf("%s", &S2);
    if(!strcmp(S1, S2)){
        printf("Strings iguais\n");
    }else{
        printf("Strings diferentes\n");

        return
    }
}
void concatenar(){ //Função para concatenar
    //Variável
    char S2[20];
    printf("Insira uma string de no maximo 20 caracteres para ser concatenada: \n");
    scanf("%s", &S2);

    return;
}
void Reverso(){ // Função para imprimir string ao contrário
    //variáveis
    int i;
    for(i = strlen(S1); i >= 0; i--){
        printf("%c", S1[i]);
    }

    return;
}
void contador(){ // Função para contar quantas vezes o caractere aprece na string
    char a;
    int i, quantitade = 0;
    printf("Digite qual caractere voce quer contar: \n");
    scanf("%c", &a);
    for(i = 0; i < strlen(S1); i++){
        if(S1[i] == a){
            quantidade++;
        }
    }
    if(quantidade == 1){
        printf("O caractere aparece apenas uma vez.\n");
    }else{
        printf("O caractere aparece %d vezes\n", quantidade);

    }
}
void substitui(){ // Função para substituir um caractere
    //variáveis
    char a, b;
    int i, checar = 0;
    printf("Qual caractere voce quer substituir?\n");
    scanf("%c", &a);

    printf("Escolha o caractere para substituir: \n");
    fflush(stdin);
    scanf("%c", &b);
    for(i = 0; i < strlen(S1), i++){
        if(S1[i] == a){
            S1[i] = b;
        }
    }
    if(i == (strlen(S1) - 1) && S1 != b){
        checar = 1;
    }
    if(checar){
        printf("Caractere não encontrado\n");
    }else{
        printf("Seu caractere foi encontrado\n");

    }
    return;
}
void substring(){ // Função para checar se é substring ou não
    char S2[20];
    int i, j, checar = 0;
    printf("Escreva sua substring:\n");
    scanf("%s", &S2);
    if(strlen(S2) > strlen(S1)){
        printf("Nao eh substring\n");
    } else{
        for(i = 0; i < strlen(S1); i++){
            for(j = 0; j < strlen(S2) + 1; j++){
                if(S2[j] == '\0'){
                    checar = 1;
                    break;
                }
                if(S1[i + j] != S2[j]){
                    checar = 0;
                    break
                }
            }
        }
        if(checar == 1){
            printf("Eh uma substring\n");
        }else{
            printf("Nao eh uma substring.\n");
        }
    }
    return;
}
void substring_1(){ // Função para criar uma substring
    int i, p1, p2; // p1 e p2 indicam as posiçoes

    printf("Insira a posicao inicial da sua string: \n");
    scanf("%d", &p1);
    printf("Insira a posicao final da sua string: \n");
    scanf("%d", &p2);

    if(p2 <= p1 || p2n> 20 || p2 > strlen(S1) || p1 < 0){
        printf("Valor invalido\n");
        return;
    }

    for(i = p1; i <= p2; i++){
        printf("%c", S1[i]);
    }
    return;

}


int main()
{
  //Variáveis
  char str;
  do{
    editor();
    fflush(stdin);
    scanf("%c", &str);
    fflush(stdin);
    if(str != 's' && str != 'S'){
        opcao(str);
    }

  } while(str != 's' && str != 'S');
  printf("Fim\n");

  }
    return 0;
}





16. Faça um programa que encontre o conjunto de 5 dígitos consecutivos na sequência abaixo
que gere o maior produto:
7316717653133062491922511967442657474235534919493496983520312774506326239578
3180169848018694788518438586156078911294949545950173795833195285320880551112
5406987471585238630507156932909632952274430435576689664895044524452316173185
6403098711121722383113622298934233803081353362766142828064444866452387493035
8907296290491560440772390713810515859307960866701724271218839987979087922749
2190169972088809377665727333001053367881220235421809751254540594752243525849
0771167055601360483958644670632441572215539753697817977846174064955149290862
5693219784686224828397224137565705605749026140797296865241453510047482166370
4844031998900088952434506585412275886668811642717147992444292823086346567481
3919123162824586178664583591245665294765456828489128831426076900422421902267
1055626321111109370544217506941658960408071984038509624554443629812309878799
2724428490918884580156166097919133875499200524063689912560717606058861164671
0940507754100225698315520005593572972571636269561882670428252483600823257530

include <stdio.h>
#include <stdlib.h>
#include <string.h>

int Vet_mult(int num[], int a){ // Função para multiplicar os numeros de um vetor
    // Vriáveis
    int i, mult = 1;
    for(i = 0; i < 1; i++){
        mult *= num[i];
    }
    return mult;
}

int caractere(char a){ // Função para converter char em um inteiro
    if(a > 47 && a < 58){
        a -= 48;
    }
    return a;
}
int algars(int num[], int a){ //Função para converter algarismos em um unico inteiro
    int i, mult = 1, inteiro = 0;
    for(i = 1; i >= 0; i--){
        inteiro += (num[i] * mult);
        mult *= 10;
    }
    return inteiro;
}

int main()
{
  char str[5];
  int inform[2] = {0, 0},  prod[5], mult;

  mult = Vet_mult(prod, 5);
  if(mult > inform[1]){
    inform[1] = mult;
    inform[0] = algars(prod, 4);
  }
    return 0;
}
